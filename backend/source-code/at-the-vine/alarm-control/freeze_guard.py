""" 
Jaye Hicks 2020

Obligatory legal disclaimer:
  You are free to use this source code (this file and all other files 
  referenced in this file) "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER 
  EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. 
  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THIS SOURCE CODE
  IS WITH YOU.  SHOULD THE SOURCE CODE PROVE DEFECTIVE, YOU ASSUME THE
  COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. See the GNU 
  GENERAL PUBLIC LICENSE Version 3, 29 June 2007 for more details.
  
This module serves as an AWS Lambda function intended to be invoked on
a regularly scheduled basis by a CloudWatch Events rule in order to 
detect any vinedyard sensor stations that have reported a temperature 
below the temperature threshold. This will be accomplished by checking
the DynamoDB table table_name_1 dedicated to containing the most 
recent vineyard sensor station reading for each station.  If any 
station reports a temperature below the threshold, a single 
consolidated message will be sent to an SNS topic, listing all of the 
offending stations and an ALARM system message will be logged.

It is possible for one or more sensor stations to report a temperature 
below the threshold and yet not send an ALERT or log an ALARM
message.  Firstly, the 'freeze_guard' may be turned off (setting 
resides in the DynamoDB table_name_6).  The 'freeze_guard' 
setting of 'on' / 'off' applies to all 21 vineyard stations.  Also, 
individual stations may be taken 'offline' (setting resides in the 
DynamoDB table table_name_1).  Even if a station is taken 
'offline', incoming raw sensor data for that station will continue to 
update the table_name_5 table and the table_name_1 table. And 
finally, if the most recent temperature reading for a sensor is below
the temperature threshold this will only qualify for an alarm state if
the most recent temperature reading is not outside of the data shelf 
life limit set for Freeze Guard.

Given that vineyard sensor stations report temperature once an hour (at
most), a small percentage of sensor reports fail to register in the
AWS backent, none of the 21 sensors are coordinated to report
sensor data at the same time, and the critically urgent need for as much
forewarning of a freeze event as possible, it is recommended that this
job run every 15 mins.

Informational and error messages generated by this module, and other 
Python modules that work with this raw vineyard sensor data (e.g., 
ingestion, life cycle management, freeze/battery/absence guard), are 
stored in two DynamoDB tables.  Messages stored in the table for errors, 
table_name_3, will not automatically expire and require 
manual data lifecycle management. Messages stored in the the table for 
informational missives, table_name_4, are inserted with a 
TTL value and are therefore automatically purged after reaching a 
certain age.

Usage: 
  A CloudWatch Events Rule invokes, on an regularly scheduled basis, 
  this AWS Lambda function by calling the function lambda_handler and 
  passing to it the input parameters 'event' and 'context.'

Dependencies:
  import boto3
  import time
  from boto3.dynamodb.conditions import Key
  from datetime import datetime, timedelta
"""
import boto3
import time
from boto3.dynamodb.conditions import Key
from datetime import datetime, timedelta

STATUS_TABLE        = 'table_name_1'
CONTROL_TABLE       = 'table_name_2'
CONTROL_ITEM_SELECT = '1'
SNS_TOPIC_ARN       = 'arn:aws:sns:us-east-1:123456789012:alert_name'

JOB                 = 'freeze_guard'
ERROR               = 1
ALARM               = 2
INFO                = 3
WARN                = 4
error_messages      = {}
info_messages       = {}
     
     
def _write_logs_to_databases():
  """
  As part of the backend management / processing of vineyard sensor 
  stations raw data, messages are recorded to DynamoDB tables by the
  various Python jobs that ingest and curate the data.  Informational
  message have a TTL, error messages do not and require manual curation.
  Due to low volume, a batch writer to insert messages not needed.
  """
  try:
    dynamo_db_access = boto3.resource('dynamodb')
    if(error_messages):
      try:
        table = dynamo_db_access.Table('table_name_3')
        for key, value in error_messages.items():
          table.put_item(Item={'date' : value['date'], 
                               'stamp_job' : key,
                               'message': value['message']})
      except:
        pass  #where do you log when logging doesn't work?
    if(info_messages):
      try:
        table = dynamo_db_access.Table('table_name_4')
        for key, value in info_messages.items():
          table.put_item(Item={'date': value['date'],
                               'stamp_job' : key, 
                               'message': value['message'], 
                               'expiry' : value['expiry']})
      except:
        pass #where do you log when logging doesn't work?
  except:
    pass #where do you log when logging doesn't work?
  
  
def _log_message(position, type, message, exception):
  """
  As part of the backend management / processing of vineyard sensor 
  stations raw data, messages are recorded to DynamoDB tables.  As
  the epoch timestamp used is in seconds, vs milliseconds, the 1
  second delay is used to avoid sort key clashes.  Wont be a performance
  issue as this funciton is called infrequently.
  
  Note: 2038 epoch time roll over issue
  """    
  time.sleep(1)
  now = datetime.now()
  timestamp = int(now.timestamp()) #converts millisecons to seconds
  cst = now - timedelta(hours=6)   #UTC to US Central Std
  date = str(cst.year) + '-' + str(cst.month).zfill(2) + '-' 
  date += str(cst.day).zfill(2)
  stamp_job = str(timestamp) + '+' + JOB
  prefix = ['','ERROR: (','ALARM: (','INFO: (','WARN: (']
    
  log_message = prefix[type] + position + ') ' + message + ' '  
  if(exception):
    try:
      if(exception.response['Error']['Message']):
        log_message += exception.response['Error']['Message']
      else:
        log_message += str(exception)
    except:
      log_message += str(exception)
  
  if((type == ERROR) or (type == ALARM)):
    error_messages[stamp_job] = {'date' : date, 'message' : log_message}
  else:
    expiration = timestamp + 5184000   #DynamoDB autodelete in 2 months
    info_messages[stamp_job] = {'date' : date, 'message' : log_message,
                                'expiry' : expiration}


def _freeze_guard_is_on(setting):
  """
  The value of the "freeze_guard" attribute in the Control database
  can be "on", "off", or an epoch time.  "on" / "off" are self-
  explanatory.  An epoch time stamp is used to designate that
  the battery guard functionality should be considered off until the
  future point in time designated by the epoch time stamp. If an
  expired epoch time stamp is discovered, or an invalid one, then
  the "freeze_guard" attribute will be set to "on"
   
  Returns
    True   if the "freeze_guard" attribute is set to "on" or the 
           epoch time stamp represents a date time in the past or
           the epoch time stamp is not a valid epoch time stamp
    False  if the "freeze_guard" attribure is set to "off" or the
           epoch time stamp represents a date time in the future
  """
  if(setting.lower() == 'on'):
    result = True
  else:
    if(setting.lower() == 'off'):
      result = False
    else:
      try:
        time_stamp = abs(int(setting))
        if(time_stamp > int(datetime.now().timestamp())):
          result = False
        else:
          result = True
          time_stamp = 0
      except Exception as e:
        result = True    #revert to default setting of 'on'
        time_stamp = 0
        _log_message('1', ERROR, '', e)
          
      #expired/invalid time stamp; set to 'on'
      if(not time_stamp):
        try:
          dynamo_db_access = boto3.resource('dynamodb')
          table = dynamo_db_access.Table(CONTROL_TABLE)
          
          try:
            update_expression = 'set freeze_guard = :b'
            table.update_item(
              Key={'control_id': CONTROL_ITEM_SELECT},
                   UpdateExpression=update_expression,
                   ExpressionAttributeValues={':b' : 'on'}) 
          except Exception as e:
            _log_message('2', ERROR, '', e)
        except Exception as e:
          _log_message('3', ERROR, '', e)
  return(result)
  
 
def freeze_guard(event, context):
  """
  If the freeze-guard feature is enabled, find any vineyard sensor
  station with a most recent temperature reading (but dont consider 
  anything that is not recent [e.g., over 12 hours old]) that is 
  below the temp threshold and with a status setting of 'on.'  Report
  all stations below temp threshold in a single message posted to SNS 
  topic.
  
  Note: 2038 epoch time roll over issue
  
  Args (supplied by AWS Lambda service)
    event: information about who/what invoked the Lambda function
    context: information about the Lambda function's runtime environment
  """
  alarm_message_prefix =  'The following station(s) has reported a low '
  alarm_message_prefix += 'temperature within the past '
  
  #necessary as Lambda service caches globals between function invocations
  global error_messages
  error_messages  = {}
  global info_messages
  info_messages  = {}
    
  try:
    dynamo_db_access = boto3.resource('dynamodb')
    table = dynamo_db_access.Table(CONTROL_TABLE)
    try:
      response = table.query(
        KeyConditionExpression=Key('control_id').eq(CONTROL_ITEM_SELECT))
      if(response['Items']):
        if(_freeze_guard_is_on(response['Items'][0]['freeze_guard'])):
          FREEZE_THRESHHOLD = float(response['Items'][0]['freeze_thresh'])
          FREEZE_DATA_CURRENT = int(response['Items'][0]['freeze_cutoff'])
          alarm_message_prefix += str(FREEZE_DATA_CURRENT) + ' hours: '
          try:
            table = dynamo_db_access.Table(STATUS_TABLE)
            try:
              freezing_stations = []
              cut_off_ts = int((datetime.now() - 
                           timedelta(hours=FREEZE_DATA_CURRENT)).timestamp())
              response = table.scan()
              if(response['Items']):
                for item in response['Items']:
                  if((int(item['tstamp']) > cut_off_ts) and
                     (float(item['temperature']) <= FREEZE_THRESHHOLD) and
                     (item['tstatus'].lower() == 'online')):
                    freezing_stations.append(item['location'])
                if(freezing_stations):
                  message = alarm_message_prefix
                  for station in freezing_stations:
                    message += station + ', '
                  _log_message('4', ALARM, message[:-2], '')
                  _send_alert(message[:-2])
              else:
                _log_message('5', ERROR, 
                  'Scan of DyanmoDB status table returned 0 Items.', '')
            except Exception as e:
              _log_message('6', ERROR, '', e)   
          except Exception as e:
            _log_message('7', ERROR, '', e)
      else:
        _log_message('8', ERROR, 'Could not read control Item ' + 
                     CONTROL_ITEM_SELECT + ' from DynamoDB control table.', '') 
    except Exception as e:
      _log_message('9', ERROR, '', e)           
  except Exception as e:
    _log_message('10', ERROR, '', e)
 
  if(error_messages):
    _log_message('11', WARN, 'Freeze Guard process raised an alarm or did ' +
                 'not complete successfully.', '')
  else:
    _log_message('12', INFO, 'Freeze Guard process completed successfully.','')
    
  _write_logs_to_databases()

 
def _send_alert(message):
  """
  Post the text contained in the parameter 'message' to the SNS topic 
  """
  if(message):
    try:
      sns_access = boto3.client('sns')
      resp = sns_access.publish(TargetArn = SNS_TOPIC_ARN,
                                Message = message)
      if(resp['ResponseMetadata']['HTTPStatusCode'] != 200):
        _log_message('13', ERROR, 'Issue posting message to SNS.', '')    
    except Exception as e:
      _log_message('14', ERROR, '', e)
  else:
    _log_message('15', WARN, 'Avoided sending empty message to SNS topic.', '')